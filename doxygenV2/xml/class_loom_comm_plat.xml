<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_loom_comm_plat" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>LoomCommPlat</compoundname>
    <basecompoundref refid="class_loom_module" prot="public" virt="non-virtual">LoomModule</basecompoundref>
    <derivedcompoundref refid="class_loom___bluetooth" prot="public" virt="non-virtual">Loom_Bluetooth</derivedcompoundref>
    <derivedcompoundref refid="class_loom___lo_ra" prot="public" virt="non-virtual">Loom_LoRa</derivedcompoundref>
    <derivedcompoundref refid="class_loom__n_r_f" prot="public" virt="non-virtual">Loom_nRF</derivedcompoundref>
    <includes refid="_comm_plat_8h" local="no">CommPlat.h</includes>
      <sectiondef kind="user-defined">
      <header>RADIO IMPLEMENTATION</header>
      <memberdef kind="function" id="class_loom_comm_plat_1acc447dd60751ea7536f0c96b4390fdd8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool LoomCommPlat::receive_blocking_impl</definition>
        <argsstring>(JsonObject json, uint max_wait_time)</argsstring>
        <name>receive_blocking_impl</name>
        <reimplementedby refid="class_loom__n_r_f_1a8f4a184813d9aed777997f63e9835e42">receive_blocking_impl</reimplementedby>
        <reimplementedby refid="class_loom___lo_ra_1a62143785c09b5e48a31cc3643398d1f8">receive_blocking_impl</reimplementedby>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>max_wait_time</declname>
        </param>
        <briefdescription>
<para>Receive, but block until packet received, or timeout reached. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json object to fill with incoming data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">max_wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of milliseconds to block for (can be zero for non-blocking) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="63" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a28f40393c7d50d3bf30eff3add02d6fc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool LoomCommPlat::send_impl</definition>
        <argsstring>(JsonObject json, const uint8_t destination)</argsstring>
        <name>send_impl</name>
        <reimplementedby refid="class_loom__n_r_f_1ad63d064b8ae495e699627a3bc2c57fa4">send_impl</reimplementedby>
        <reimplementedby refid="class_loom___lo_ra_1ac349e4d3e3b6408c83b9c8020c501023">send_impl</reimplementedby>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Send json to a specific address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json package to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to send to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet sent successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="69" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ae88689d0db8ab91d1e672f0b5c358945" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void LoomCommPlat::broadcast_impl</definition>
        <argsstring>(JsonObject json)</argsstring>
        <name>broadcast_impl</name>
        <reimplementedby refid="class_loom__n_r_f_1a3e4d0db03fde19d29311338d5f3a979a">broadcast_impl</reimplementedby>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Broadcast data to all that can receive. </para>        </briefdescription>
        <detaileddescription>
<para>Derived classes can optionally provide an implementation for this, As supported by the radio/platform&apos;s library <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json object to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="75" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="75" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CONSTRUCTORS / DESTRUCTOR</header>
      <memberdef kind="function" id="class_loom_comm_plat_1ae977f58b40bd6f292fc7e5a20b319ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LoomCommPlat::LoomCommPlat</definition>
        <argsstring>(LoomManager *manager, const char *module_name, const LoomModule::Type module_type, const uint16_t max_message_len)</argsstring>
        <name>LoomCommPlat</name>
        <param>
          <type><ref refid="class_loom_manager" kindref="compound">LoomManager</ref> *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module_name</declname>
        </param>
        <param>
          <type>const <ref refid="class_loom_module_1aee91d0a75140d51ee428fc2d4417d865" kindref="member">LoomModule::Type</ref></type>
          <declname>module_type</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>max_message_len</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module (provided by derived classes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the module (provided by derived classes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_message_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum possible message length </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="87" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="15" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a88da37ecf287280aa166e25f4f947b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual LoomCommPlat::~LoomCommPlat</definition>
        <argsstring>()=default</argsstring>
        <name>~LoomCommPlat</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>OPERATION</header>
      <memberdef kind="function" id="class_loom_comm_plat_1a4cc05ef1f12c5b15fc6516dc75f070d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void LoomCommPlat::package</definition>
        <argsstring>(JsonObject json) override</argsstring>
        <name>package</name>
        <reimplements refid="class_loom_module_1a84f1c1f3340203a3457b5ffe0bd53a53">package</reimplements>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Package a modules measurements or state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to put data into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="101" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a15fb6d65a9454154ac899f3560c67a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive_blocking</definition>
        <argsstring>(JsonObject json, uint max_wait_time)</argsstring>
        <name>receive_blocking</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>max_wait_time</declname>
        </param>
        <briefdescription>
<para>Receive, but block until packet received, or timeout reached. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json object to fill with incoming data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of milliseconds to block for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="107" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a7d5af29f4053627979c15928f284446f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive</definition>
        <argsstring>(JsonObject json)</argsstring>
        <name>receive</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Build json from packet if any exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json object to fill with incoming data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="111" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ab59a3e7ed1aa0c3997506bf77b1176e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive_batch</definition>
        <argsstring>()</argsstring>
        <name>receive_batch</name>
        <briefdescription>
<para>Receive and immediately create a batch file from JSON receieved. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if packet was recieved and stored in batch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="115" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a84aa23d66457ffe78053d3d0cbd1e7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive_batch_blocking</definition>
        <argsstring>(uint max_wait_time)</argsstring>
        <name>receive_batch_blocking</name>
        <param>
          <type>uint</type>
          <declname>max_wait_time</declname>
        </param>
        <briefdescription>
<para>Receive, and block until packet recieved or timeout, and immediately create a batch file from JSON receieved. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">max_wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of milliseconds to block for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet was recieved and stored in batch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="120" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1abe9a506341e7e5dd3dde40210d7c3904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive</definition>
        <argsstring>()</argsstring>
        <name>receive</name>
        <briefdescription>
<para>Version of receive for use with <ref refid="class_loom_manager" kindref="compound">LoomManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accesses Json from <ref refid="class_loom_manager" kindref="compound">LoomManager</ref> <simplesect kind="return"><para>True if packet received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="125" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a5a16f4a2a37ddf593f7a3c0dd9e5f692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::receive_blocking</definition>
        <argsstring>(const uint max_wait_time)</argsstring>
        <name>receive_blocking</name>
        <param>
          <type>const uint</type>
          <declname>max_wait_time</declname>
        </param>
        <briefdescription>
<para>Version of receive_blocking for use with <ref refid="class_loom_manager" kindref="compound">LoomManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accesses Json from <ref refid="class_loom_manager" kindref="compound">LoomManager</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">max_wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of milliseconds to block for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="131" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a727f88000d237c0f413a17600fc261a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JsonObject</type>
        <definition>JsonObject LoomCommPlat::pre_merge_receive_blocking</definition>
        <argsstring>(JsonObject json)</argsstring>
        <name>pre_merge_receive_blocking</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Giving the header of the Package from the other board. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>json of the headers if it came in split </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JsonObject it will return the headers of the package </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="136" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="102" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a3505da17f54272de95f4d92a3c0caf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::merge_json</definition>
        <argsstring>(JsonObject json, const uint8_t loop)</argsstring>
        <name>merge_json</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>loop</declname>
        </param>
        <briefdescription>
<para>It will merge all the small packages into one big package. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The header of the package </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">loop</parametername>
</parameternamelist>
<parameterdescription>
<para>How many small packages are coming </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all package are receive and merged, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="142" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="122" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a503a10dbf3add366f1cd3bf4c274f907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::send</definition>
        <argsstring>(JsonObject json, const uint8_t destination)</argsstring>
        <name>send</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Send json to a specific address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json package to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to send to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet sent successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="148" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="186" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ae1a86dffbfd638cd56b8be47af9964ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::send</definition>
        <argsstring>(const uint8_t destination)</argsstring>
        <name>send</name>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Version of send for use with <ref refid="class_loom_manager" kindref="compound">LoomManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accesses Json from <ref refid="class_loom_manager" kindref="compound">LoomManager</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of destination device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if packet sent successfully, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="154" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="210" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a4cd103d035644901828bf4959cd7a9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t LoomCommPlat::send_batch</definition>
        <argsstring>(const uint8_t destination, int delay_time)</argsstring>
        <name>send_batch</name>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay_time</declname>
        </param>
        <briefdescription>
<para>Sends all the jsons stored in the batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of destination device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delay_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time between each packet in the batch being sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the packet sent successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="160" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="221" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ab8fd85c99d07244665b818610edde993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t LoomCommPlat::determine_json_size</definition>
        <argsstring>(JsonObject json)</argsstring>
        <name>determine_json_size</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Return the size of the json to determing wether to send as split or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json that will the measurement of the size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t of the value of the json size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="165" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="246" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1abc9ba333b93167dda5dd721eb4a04d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::split_send_notification</definition>
        <argsstring>(JsonObject json, const uint8_t destination)</argsstring>
        <name>split_send_notification</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>If the json is over 251, then it let the user the know that it will be sending small mulitple jsons with how many will it be splited into. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The original message pacakge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of destination device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if able to send notification to the other board, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="172" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="277" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a7a0d2c230d977bfb8f286aab7bd8469e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::split_send</definition>
        <argsstring>(JsonObject json, const uint8_t destination, const uint8_t index)</argsstring>
        <name>split_send</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>The actual processing spliting into small json. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The original message package </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of destination device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Json array Contents part location </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all of them send completely, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="179" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="303" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a5098505add4d65102472aeeb7dc442bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void LoomCommPlat::broadcast</definition>
        <argsstring>(JsonObject json)</argsstring>
        <name>broadcast</name>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Broadcast data to all that can receive. </para>        </briefdescription>
        <detaileddescription>
<para>Derived classes can optionally provide an implementation for this, As supported by the radio/platform&apos;s library <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>Json object to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="185" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a30796b7e6bbeb5f0c9cbf112b578c27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LoomCommPlat::broadcast</definition>
        <argsstring>()</argsstring>
        <name>broadcast</name>
        <briefdescription>
<para>Version of send for use with <ref refid="class_loom_manager" kindref="compound">LoomManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Accesses Json from <ref refid="class_loom_manager" kindref="compound">LoomManager</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="189" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="335" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a9fdc18392e011fe3bd41b37a5d3d8999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LoomCommPlat::broadcast_batch</definition>
        <argsstring>(int delay_time)</argsstring>
        <name>broadcast_batch</name>
        <param>
          <type>int</type>
          <declname>delay_time</declname>
        </param>
        <briefdescription>
<para>Broadcasts all the jsons stored in the batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time between each packet in the batch being broadcasted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="193" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="346" bodyend="365"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>PRINT INFORMATION</header>
      <memberdef kind="function" id="class_loom_comm_plat_1a97982022b7e279d4def0246e17a95d61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void LoomCommPlat::print_config</definition>
        <argsstring>() const override</argsstring>
        <name>print_config</name>
        <reimplements refid="class_loom_module_1a4385842da9226014283136b3e37dde88">print_config</reimplements>
        <reimplementedby refid="class_loom___bluetooth_1acf5fbe9ae0476fbc647c742baab183e8">print_config</reimplementedby>
        <reimplementedby refid="class_loom__n_r_f_1ad8a85a3ce2d9e2d7d12dec310a1c6615">print_config</reimplementedby>
        <reimplementedby refid="class_loom___lo_ra_1a2d73e0aa394de9db046621c86ea644c0">print_config</reimplementedby>
        <briefdescription>
<para>Display the configuration settings of the module. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="200" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a2a3336599f8b56c2cbb223a386d797ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void LoomCommPlat::print_state</definition>
        <argsstring>() const override</argsstring>
        <name>print_state</name>
        <reimplements refid="class_loom_module_1a96505b45f2e712eab5de873b4d49dfc7">print_state</reimplements>
        <briefdescription>
<para>Display current state of the module. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="201" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="39" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GETTERS</header>
      <memberdef kind="function" id="class_loom_comm_plat_1afaf204bcf88cb88102cea8c6c1d745f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint8_t</type>
        <definition>virtual uint8_t LoomCommPlat::get_address</definition>
        <argsstring>() const =0</argsstring>
        <name>get_address</name>
        <reimplementedby refid="class_loom___bluetooth_1a05e53b4b58b52d0b7068959b6246e9a2">get_address</reimplementedby>
        <reimplementedby refid="class_loom__n_r_f_1ae1140949b48b908ed1733fb8b3e7ae69">get_address</reimplementedby>
        <reimplementedby refid="class_loom___lo_ra_1acbb8f093b6c0ed07ca5816cfc4b75175">get_address</reimplementedby>
        <briefdescription>
<para>Get the address of this device. </para>        </briefdescription>
        <detaileddescription>
<para>Each platform may have a different addressing scheme <simplesect kind="return"><para>The address of this device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ad55b5a20b503ea93789159f075677d9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LoomCommPlat::get_drop_rate</definition>
        <argsstring>() const </argsstring>
        <name>get_drop_rate</name>
        <briefdescription>
<para>Get the packet drop rate since the start of operation. </para>        </briefdescription>
        <detaileddescription>
<para>Keep in mind that this drop rate will not account for retransmissions done internally by RadioHead (ex Reliable datagram), but rather will count data packets that were discarded. This rate will also ignore broadcasts, since they are nearly impossible to quantify. <simplesect kind="return"><para>The drop rate from 0 (no drops) to 100 (100% drop) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="218" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a5c21c70637e43f0731d97173b59200cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LoomCommPlat::get_last_ten_drop_rate</definition>
        <argsstring>() const </argsstring>
        <name>get_last_ten_drop_rate</name>
        <briefdescription>
<para>Get the packet drop rate of the last ten <ref refid="class_loom_comm_plat_1a503a10dbf3add366f1cd3bf4c274f907" kindref="member">send()</ref> calls. </para>        </briefdescription>
        <detaileddescription>
<para>Keep in mind that this drop rate will not account for retransmissions done internally by RadioHead (ex Reliable datagram), but rather will count data packets that were discarded. This rate will also ignore broadcasts, since they are nearly impossible to quantify. <simplesect kind="return"><para>The drop rate from 0 (no drops) to 100 (100% drop) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="226" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="55" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SETTERS</header>
      <memberdef kind="function" id="class_loom_comm_plat_1af5030b99e3398396af535558efa82279" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::json_to_msgpack_buffer</definition>
        <argsstring>(JsonObjectConst json, char *buffer, const uint16_t max_len) const </argsstring>
        <name>json_to_msgpack_buffer</name>
        <param>
          <type>JsonObjectConst</type>
          <declname>json</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>max_len</declname>
        </param>
        <briefdescription>
<para>Serialize a JsonObject into a MessagePack buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Also contains buffer memsetting and print statements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>JsonObject to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to fill with MessagePack of json </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="246" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="369" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1ae6b8468f5345cf30d857e3229d3f5aa3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoomCommPlat::msgpack_buffer_to_json</definition>
        <argsstring>(const char *buffer, JsonObject json)</argsstring>
        <name>msgpack_buffer_to_json</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>JsonObject</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserialize a MessagePack buffer into a JsonObject. </para>        </briefdescription>
        <detaileddescription>
<para>Also clears the json, contains prints and error checks. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to deserialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">json</parametername>
</parameternamelist>
<parameterdescription>
<para>JsonObject to deserialize into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="254" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="385" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1a7053c8475d0f2c00507fe0806f1d37bc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LoomCommPlat::add_packet_result</definition>
        <argsstring>(const bool did_drop)</argsstring>
        <name>add_packet_result</name>
        <param>
          <type>const bool</type>
          <declname>did_drop</declname>
        </param>
        <briefdescription>
<para>Add the result of a packet to the drop_rate tracker. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">did_drop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the packet dropped during transmission. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="258" column="1" bodyfile="src/CommPlats/CommPlat.cpp" bodystart="418" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_loom_comm_plat_1afa0f66b4e657effefc34fa5a74363174" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void LoomCommPlat::set_address</definition>
        <argsstring>(const uint8_t a)=0</argsstring>
        <name>set_address</name>
        <reimplementedby refid="class_loom___bluetooth_1a963fd394e050a4b1fb12311d6fe8f97f">set_address</reimplementedby>
        <reimplementedby refid="class_loom__n_r_f_1ab1020ef07ac5be037991ae48a5a6b682">set_address</reimplementedby>
        <reimplementedby refid="class_loom___lo_ra_1abeb44544dc17bbc4d762ac53015c0e94">set_address</reimplementedby>
        <param>
          <type>const uint8_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set the address of this device. </para>        </briefdescription>
        <detaileddescription>
<para>Each platform may have a different addressing scheme. Changing the device&apos;s address is not recommended. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to set this device to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="236" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_loom_comm_plat_1a2b4f69c2ec15028f5f281c3d1d399dba" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t LoomCommPlat::max_message_len</definition>
        <argsstring></argsstring>
        <name>max_message_len</name>
        <briefdescription>
<para>The maximum message length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="35" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a20b6f639d308b8b2f05cea41597bd6d3" prot="protected" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t LoomCommPlat::signal_strength</definition>
        <argsstring></argsstring>
        <name>signal_strength</name>
        <briefdescription>
<para>RSSI for Lora (need to determine what the other platforms use) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="36" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a065bda8c5f83a087359bda645b51c87e" prot="protected" static="no" mutable="no">
        <type>StaticJsonDocument&lt; 1500 &gt;</type>
        <definition>StaticJsonDocument&lt;1500&gt; LoomCommPlat::messageJson</definition>
        <argsstring></argsstring>
        <name>messageJson</name>
        <briefdescription>
<para>Document to read incoming data into. </para>        </briefdescription>
        <detaileddescription>
<para>CommPlatforms need their own JsonDocument because an incoming message can only be deserialized into JsonDocuments, not JsonObjects. And it seemed bad design to pass around references to the <ref refid="class_loom_manager" kindref="compound">LoomManager</ref>&apos;s internal JsonDocument. Especially as the <ref refid="class_loom_manager" kindref="compound">LoomManager</ref> is intended to be non-mandatory for usage of Loom </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="44" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a9dbf2f13eafb03ae9078e10af47ca8cf" prot="protected" static="no" mutable="no">
        <type>DynamicJsonDocument</type>
        <definition>DynamicJsonDocument LoomCommPlat::mergeJson</definition>
        <argsstring></argsstring>
        <name>mergeJson</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="45" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1afacaa3247078d09dd953371cfb929094" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t LoomCommPlat::total_packet_count</definition>
        <argsstring></argsstring>
        <name>total_packet_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="48" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a731d3f9f16e8a2647f0ef81e477ef2a7" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t LoomCommPlat::total_drop_count</definition>
        <argsstring></argsstring>
        <name>total_drop_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="49" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a447e99f2f727936f4aff95257ca98b62" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LoomCommPlat::last_ten_dropped[10]</definition>
        <argsstring>[10]</argsstring>
        <name>last_ten_dropped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="50" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_loom_comm_plat_1a790dbad03d48713072716c23d515c6c0" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t LoomCommPlat::last_ten_dropped_idx</definition>
        <argsstring></argsstring>
        <name>last_ten_dropped_idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CommPlats/CommPlat.h" line="51" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base of communication platform modules. </para>    </briefdescription>
    <detaileddescription>
<para>All communication platform modules inherit from this class.</para><para><simplesect kind="par"><title>Resources</title><para><itemizedlist>
<listitem><para><ulink url="https://openslab-osu.github.io/Loom/html/class_loom_comm_plat.html">Module Documentation</ulink></para></listitem><listitem><para><ulink url="https://github.com/OPEnSLab-OSU/Loom/wiki/Hardware-Support#telecommunication-capabilities">Hardware Support</ulink> </para></listitem></itemizedlist>
</para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1080">
        <label>LoomModule</label>
        <link refid="class_loom_module"/>
      </node>
      <node id="1082">
        <label>Loom_LoRa</label>
        <link refid="class_loom___lo_ra"/>
        <childnode refid="1079" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1079">
        <label>LoomCommPlat</label>
        <link refid="class_loom_comm_plat"/>
        <childnode refid="1080" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1083">
        <label>Loom_nRF</label>
        <link refid="class_loom__n_r_f"/>
        <childnode refid="1079" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1081">
        <label>Loom_Bluetooth</label>
        <link refid="class_loom___bluetooth"/>
        <childnode refid="1079" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1090">
        <label>Loom_Interrupt_Manager::StopWatchDetails</label>
      </node>
      <node id="1086">
        <label>LoomManager</label>
        <link refid="class_loom_manager"/>
        <childnode refid="1087" relation="usage">
          <edgelabel>warmup_manager</edgelabel>
        </childnode>
        <childnode refid="1088" relation="usage">
          <edgelabel>sleep_manager</edgelabel>
        </childnode>
        <childnode refid="1093" relation="usage">
          <edgelabel>rtc_module</edgelabel>
        </childnode>
        <childnode refid="1089" relation="usage">
          <edgelabel>interrupt_manager</edgelabel>
        </childnode>
      </node>
      <node id="1085">
        <label>LoomModule</label>
        <link refid="class_loom_module"/>
        <childnode refid="1086" relation="usage">
          <edgelabel>device_manager</edgelabel>
        </childnode>
      </node>
      <node id="1094">
        <label>Loom_Interrupt_Manager::InternalTimerDetails</label>
      </node>
      <node id="1089">
        <label>Loom_Interrupt_Manager</label>
        <link refid="class_loom___interrupt___manager"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
        <childnode refid="1090" relation="usage">
          <edgelabel>stopwatch_settings</edgelabel>
        </childnode>
        <childnode refid="1091" relation="usage">
          <edgelabel>int_settings</edgelabel>
        </childnode>
        <childnode refid="1088" relation="usage">
          <edgelabel>Sleep_Manager</edgelabel>
        </childnode>
        <childnode refid="1092" relation="usage">
          <edgelabel>timer_settings</edgelabel>
        </childnode>
        <childnode refid="1093" relation="usage">
          <edgelabel>RTC_Inst</edgelabel>
        </childnode>
        <childnode refid="1094" relation="usage">
          <edgelabel>internal_timer</edgelabel>
        </childnode>
      </node>
      <node id="1088">
        <label>Loom_Sleep_Manager</label>
        <link refid="class_loom___sleep___manager"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
        <childnode refid="1089" relation="usage">
          <edgelabel>interrupt_manager</edgelabel>
        </childnode>
      </node>
      <node id="1084">
        <label>LoomCommPlat</label>
        <link refid="class_loom_comm_plat"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1087">
        <label>Loom_WarmUp_Manager</label>
        <link refid="class_loom___warm_up___manager"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1093">
        <label>LoomRTC</label>
        <link refid="class_loom_r_t_c"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1091">
        <label>Loom_Interrupt_Manager::IntDetails</label>
      </node>
      <node id="1092">
        <label>Loom_Interrupt_Manager::TimerDetails</label>
      </node>
    </collaborationgraph>
    <location file="src/CommPlats/CommPlat.h" line="31" column="1" bodyfile="src/CommPlats/CommPlat.h" bodystart="30" bodyend="260"/>
    <listofallmembers>
      <member refid="class_loom_module_1af61a7b93ef2b9acfc22c7ad7968a45c7" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>active</name></member>
      <member refid="class_loom_module_1a06747f16d76bde35575557c7515adcc0" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>add_config</name></member>
      <member refid="class_loom_comm_plat_1a7053c8475d0f2c00507fe0806f1d37bc" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>add_packet_result</name></member>
      <member refid="class_loom_comm_plat_1a5098505add4d65102472aeeb7dc442bb" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>broadcast</name></member>
      <member refid="class_loom_comm_plat_1a30796b7e6bbeb5f0c9cbf112b578c27f" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>broadcast</name></member>
      <member refid="class_loom_comm_plat_1a9fdc18392e011fe3bd41b37a5d3d8999" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>broadcast_batch</name></member>
      <member refid="class_loom_comm_plat_1ae88689d0db8ab91d1e672f0b5c358945" prot="protected" virt="virtual"><scope>LoomCommPlat</scope><name>broadcast_impl</name></member>
      <member refid="class_loom_module_1a0c6ecc60315f95af551138dc83567068" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>Category</name></member>
      <member refid="class_loom_module_1abe41c7748d6f6566b6e96918dca12106" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>category</name></member>
      <member refid="class_loom_comm_plat_1ab8fd85c99d07244665b818610edde993" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>determine_json_size</name></member>
      <member refid="class_loom_module_1a28fe8b2fb5a9a0d14bebe13ac1c92bdf" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>device_manager</name></member>
      <member refid="class_loom_module_1aa4e7db1687a95e41ee418c201677fff8" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>dispatch</name></member>
      <member refid="class_loom_module_1a7fc17923cdef15e3a60a871a2458eaad" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>enum_category_string</name></member>
      <member refid="class_loom_module_1aaf32cb6107f0402822c615e9cd38eaef" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>enum_verbosity_string</name></member>
      <member refid="class_loom_module_1a1bb79ab68994c51851998a31b982da72" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_active</name></member>
      <member refid="class_loom_comm_plat_1afaf204bcf88cb88102cea8c6c1d745f3" prot="public" virt="pure-virtual"><scope>LoomCommPlat</scope><name>get_address</name></member>
      <member refid="class_loom_module_1a4752224a62f535fbaf3777aa486fc3c5" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_device_manager</name></member>
      <member refid="class_loom_comm_plat_1ad55b5a20b503ea93789159f075677d9f" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_drop_rate</name></member>
      <member refid="class_loom_comm_plat_1a5c21c70637e43f0731d97173b59200cf" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_last_ten_drop_rate</name></member>
      <member refid="class_loom_module_1a7ff57ffb2d8fabc484f6678f7fae8082" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_module_name</name></member>
      <member refid="class_loom_module_1a95fbb30f0ab618f3305659f9e7a4bdaf" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_module_name</name></member>
      <member refid="class_loom_module_1a4e040c36df109bfa39d9499828d3df1d" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_module_type</name></member>
      <member refid="class_loom_module_1ac259e773fa409b96fa6b43d8edeaa96b" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_package_verbosity</name></member>
      <member refid="class_loom_module_1ab17b0faa49c40c08692714ca6064a8f7" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>get_print_verbosity</name></member>
      <member refid="class_loom_comm_plat_1af5030b99e3398396af535558efa82279" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>json_to_msgpack_buffer</name></member>
      <member refid="class_loom_comm_plat_1a447e99f2f727936f4aff95257ca98b62" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>last_ten_dropped</name></member>
      <member refid="class_loom_comm_plat_1a790dbad03d48713072716c23d515c6c0" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>last_ten_dropped_idx</name></member>
      <member refid="class_loom_module_1adc08f87bf7c0c0988decee196a714396" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>link_device_manager</name></member>
      <member refid="class_loom_comm_plat_1ae977f58b40bd6f292fc7e5a20b319ca4" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>LoomCommPlat</name></member>
      <member refid="class_loom_module_1a5e0d9e185ade9e2ae5be68fdefb25887" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>LoomModule</name></member>
      <member refid="class_loom_comm_plat_1a2b4f69c2ec15028f5f281c3d1d399dba" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>max_message_len</name></member>
      <member refid="class_loom_comm_plat_1a3505da17f54272de95f4d92a3c0caf49" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>merge_json</name></member>
      <member refid="class_loom_comm_plat_1a9dbf2f13eafb03ae9078e10af47ca8cf" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>mergeJson</name></member>
      <member refid="class_loom_comm_plat_1a065bda8c5f83a087359bda645b51c87e" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>messageJson</name></member>
      <member refid="class_loom_module_1adf6e68ad7e9fa2acfca7a8a280680764" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>module_name</name></member>
      <member refid="class_loom_module_1a7cb2d5ef593dfc99e938c632f8843c84" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>module_name_base</name></member>
      <member refid="class_loom_module_1a152d394f37236a2b159dae19da67eeb0" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>module_type</name></member>
      <member refid="class_loom_comm_plat_1ae6b8468f5345cf30d857e3229d3f5aa3" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>msgpack_buffer_to_json</name></member>
      <member refid="class_loom_comm_plat_1a4cc05ef1f12c5b15fc6516dc75f070d4" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>package</name></member>
      <member refid="class_loom_module_1aec8db10ee69e265779822792f177f982" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>package_verbosity</name></member>
      <member refid="class_loom_module_1a31ea02275e356c6ce0d01fdb6d4190df" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>power_down</name></member>
      <member refid="class_loom_module_1aa0683cb24ce1cc49273440e79f035e23" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>power_up</name></member>
      <member refid="class_loom_comm_plat_1a727f88000d237c0f413a17600fc261a6" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>pre_merge_receive_blocking</name></member>
      <member refid="class_loom_comm_plat_1a97982022b7e279d4def0246e17a95d61" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>print_config</name></member>
      <member refid="class_loom_module_1a636735282f2208ab71403ae5720622ba" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>print_module_label</name></member>
      <member refid="class_loom_comm_plat_1a2a3336599f8b56c2cbb223a386d797ec" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>print_state</name></member>
      <member refid="class_loom_module_1a6e73663a6a5ebdcbe3f92153ca88ce8c" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>print_verbosity</name></member>
      <member refid="class_loom_comm_plat_1a7d5af29f4053627979c15928f284446f" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive</name></member>
      <member refid="class_loom_comm_plat_1abe9a506341e7e5dd3dde40210d7c3904" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive</name></member>
      <member refid="class_loom_comm_plat_1ab59a3e7ed1aa0c3997506bf77b1176e6" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive_batch</name></member>
      <member refid="class_loom_comm_plat_1a84aa23d66457ffe78053d3d0cbd1e7b1" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive_batch_blocking</name></member>
      <member refid="class_loom_comm_plat_1a15fb6d65a9454154ac899f3560c67a6f" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive_blocking</name></member>
      <member refid="class_loom_comm_plat_1a5a16f4a2a37ddf593f7a3c0dd9e5f692" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>receive_blocking</name></member>
      <member refid="class_loom_comm_plat_1acc447dd60751ea7536f0c96b4390fdd8" prot="protected" virt="virtual"><scope>LoomCommPlat</scope><name>receive_blocking_impl</name></member>
      <member refid="class_loom_module_1a8dd3704d1bd38868d5774e48c1073d12" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>second_stage_ctor</name></member>
      <member refid="class_loom_comm_plat_1a503a10dbf3add366f1cd3bf4c274f907" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>send</name></member>
      <member refid="class_loom_comm_plat_1ae1a86dffbfd638cd56b8be47af9964ab" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>send</name></member>
      <member refid="class_loom_comm_plat_1a4cd103d035644901828bf4959cd7a9c9" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>send_batch</name></member>
      <member refid="class_loom_comm_plat_1a28f40393c7d50d3bf30eff3add02d6fc" prot="protected" virt="virtual"><scope>LoomCommPlat</scope><name>send_impl</name></member>
      <member refid="class_loom_module_1aaac9a713ba6389818cefdc740718ad9e" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>set_active</name></member>
      <member refid="class_loom_comm_plat_1afa0f66b4e657effefc34fa5a74363174" prot="public" virt="pure-virtual"><scope>LoomCommPlat</scope><name>set_address</name></member>
      <member refid="class_loom_module_1a096b13557553a7fb283a32ab3645815b" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>set_package_verbosity</name></member>
      <member refid="class_loom_module_1a5008d47cff50ffa2e6fe4f813c3ffa1e" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>set_print_verbosity</name></member>
      <member refid="class_loom_comm_plat_1a20b6f639d308b8b2f05cea41597bd6d3" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>signal_strength</name></member>
      <member refid="class_loom_comm_plat_1a7a0d2c230d977bfb8f286aab7bd8469e" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>split_send</name></member>
      <member refid="class_loom_comm_plat_1abc9ba333b93167dda5dd721eb4a04d02" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>split_send_notification</name></member>
      <member refid="class_loom_comm_plat_1a731d3f9f16e8a2647f0ef81e477ef2a7" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>total_drop_count</name></member>
      <member refid="class_loom_comm_plat_1afacaa3247078d09dd953371cfb929094" prot="protected" virt="non-virtual"><scope>LoomCommPlat</scope><name>total_packet_count</name></member>
      <member refid="class_loom_module_1aee91d0a75140d51ee428fc2d4417d865" prot="public" virt="non-virtual"><scope>LoomCommPlat</scope><name>Type</name></member>
      <member refid="class_loom_comm_plat_1a88da37ecf287280aa166e25f4f947b37" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>~LoomCommPlat</name></member>
      <member refid="class_loom_module_1aec256a84e0498d723540743849e0166c" prot="public" virt="virtual"><scope>LoomCommPlat</scope><name>~LoomModule</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
